#!/bin/bash

/**
 * SSL Certificate Setup Script for Let's Encrypt
 * 
 * This script automates the process of obtaining SSL certificates
 * from Let's Encrypt for your QT Office Check Printing System.
 * 
 * Prerequisites:
 * - Domain name pointing to your server
 * - Port 80 and 443 open
 * - Root or sudo access
 * - Certbot installed
 * 
 * Usage:
 *   chmod +x scripts/setup-ssl.sh
 *   ./scripts/setup-ssl.sh
 */

set -e  # Exit on any error

# Configuration
DOMAIN="${DOMAIN:-}"
EMAIL="${EMAIL:-}"
WEBROOT_PATH="${WEBROOT_PATH:-/var/www/html}"
CERT_PATH="${CERT_PATH:-/etc/letsencrypt/live}"
NGINX_CONFIG_PATH="${NGINX_CONFIG_PATH:-/etc/nginx/sites-available}"
NGINX_ENABLED_PATH="${NGINX_ENABLED_PATH:-/etc/nginx/sites-enabled}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root or with sudo"
        exit 1
    fi
}

# Check if domain is provided
check_domain() {
    if [[ -z "$DOMAIN" ]]; then
        log_error "Domain is required. Set DOMAIN environment variable or provide as argument."
        echo "Usage: DOMAIN=yourdomain.com ./scripts/setup-ssl.sh"
        echo "   or: ./scripts/setup-ssl.sh yourdomain.com"
        exit 1
    fi
    
    log_info "Setting up SSL for domain: $DOMAIN"
}

# Check if email is provided
check_email() {
    if [[ -z "$EMAIL" ]]; then
        log_warning "Email not provided. Let's Encrypt will use a default email."
        log_warning "It's recommended to set EMAIL environment variable for renewal notifications."
    else
        log_info "Using email: $EMAIL"
    fi
}

# Install certbot if not installed
install_certbot() {
    log_info "Checking if certbot is installed..."
    
    if ! command -v certbot &> /dev/null; then
        log_info "Installing certbot..."
        
        # Detect OS and install certbot
        if [[ -f /etc/debian_version ]]; then
            # Debian/Ubuntu
            apt-get update
            apt-get install -y certbot python3-certbot-nginx
        elif [[ -f /etc/redhat-release ]]; then
            # CentOS/RHEL
            yum install -y certbot python3-certbot-nginx
        elif [[ -f /etc/arch-release ]]; then
            # Arch Linux
            pacman -S --noconfirm certbot certbot-nginx
        else
            log_error "Unsupported operating system. Please install certbot manually."
            exit 1
        fi
        
        log_success "Certbot installed successfully"
    else
        log_success "Certbot is already installed"
    fi
}

# Create webroot directory
create_webroot() {
    log_info "Creating webroot directory: $WEBROOT_PATH"
    mkdir -p "$WEBROOT_PATH"
    
    # Create a simple index.html for verification
    cat > "$WEBROOT_PATH/index.html" << EOF
<!DOCTYPE html>
<html>
<head>
    <title>QT Office - SSL Setup</title>
</head>
<body>
    <h1>QT Office Check Printing System</h1>
    <p>SSL certificate setup in progress...</p>
</body>
</html>
EOF
    
    log_success "Webroot directory created"
}

# Obtain SSL certificate
obtain_certificate() {
    log_info "Obtaining SSL certificate for $DOMAIN..."
    
    # Build certbot command
    local certbot_cmd="certbot certonly --webroot -w $WEBROOT_PATH -d $DOMAIN --non-interactive --agree-tos"
    
    if [[ -n "$EMAIL" ]]; then
        certbot_cmd="$certbot_cmd --email $EMAIL"
    else
        certbot_cmd="$certbot_cmd --register-unsafely-without-email"
    fi
    
    # Run certbot
    if $certbot_cmd; then
        log_success "SSL certificate obtained successfully"
    else
        log_error "Failed to obtain SSL certificate"
        exit 1
    fi
}

# Create Nginx configuration
create_nginx_config() {
    log_info "Creating Nginx configuration..."
    
    local nginx_config="$NGINX_CONFIG_PATH/qt-office"
    
    cat > "$nginx_config" << EOF
# QT Office Check Printing System - Nginx Configuration
# Generated by SSL setup script

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name $DOMAIN;
    
    # Let's Encrypt challenge
    location /.well-known/acme-challenge/ {
        root $WEBROOT_PATH;
    }
    
    # Redirect all other HTTP traffic to HTTPS
    location / {
        return 301 https://\$server_name\$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl http2;
    server_name $DOMAIN;
    
    # SSL Configuration
    ssl_certificate $CERT_PATH/$DOMAIN/fullchain.pem;
    ssl_certificate_key $CERT_PATH/$DOMAIN/privkey.pem;
    
    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # HSTS
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Security Headers
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; script-src 'self'; connect-src 'self'; frame-src 'none'; object-src 'none'; upgrade-insecure-requests;" always;
    
    # Proxy to Next.js application
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Health check endpoint
    location /health {
        proxy_pass http://localhost:3000/health;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
    
    # Static files caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        # Cache static files
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}
EOF
    
    log_success "Nginx configuration created: $nginx_config"
}

# Enable Nginx site
enable_nginx_site() {
    log_info "Enabling Nginx site..."
    
    # Remove default site if it exists
    if [[ -f "$NGINX_ENABLED_PATH/default" ]]; then
        rm -f "$NGINX_ENABLED_PATH/default"
        log_info "Removed default Nginx site"
    fi
    
    # Enable QT Office site
    ln -sf "$NGINX_CONFIG_PATH/qt-office" "$NGINX_ENABLED_PATH/qt-office"
    
    # Test Nginx configuration
    if nginx -t; then
        log_success "Nginx configuration is valid"
    else
        log_error "Nginx configuration is invalid"
        exit 1
    fi
    
    # Reload Nginx
    systemctl reload nginx
    log_success "Nginx reloaded successfully"
}

# Setup automatic renewal
setup_renewal() {
    log_info "Setting up automatic certificate renewal..."
    
    # Create renewal script
    cat > /usr/local/bin/renew-ssl.sh << EOF
#!/bin/bash
# SSL Certificate Renewal Script

# Renew certificates
certbot renew --quiet

# Reload Nginx
systemctl reload nginx

# Log renewal
echo "\$(date): SSL certificates renewed" >> /var/log/ssl-renewal.log
EOF
    
    chmod +x /usr/local/bin/renew-ssl.sh
    
    # Add cron job for automatic renewal
    (crontab -l 2>/dev/null; echo "0 12 * * * /usr/local/bin/renew-ssl.sh") | crontab -
    
    log_success "Automatic renewal setup complete"
    log_info "Certificates will be renewed automatically at 12:00 PM daily"
}

# Test SSL configuration
test_ssl() {
    log_info "Testing SSL configuration..."
    
    # Wait a moment for Nginx to reload
    sleep 2
    
    # Test HTTPS connection
    if curl -s -o /dev/null -w "%{http_code}" "https://$DOMAIN" | grep -q "200\|301\|302"; then
        log_success "HTTPS connection successful"
    else
        log_warning "HTTPS connection test failed. Please check your configuration."
    fi
    
    # Test HTTP to HTTPS redirect
    if curl -s -o /dev/null -w "%{http_code}" "http://$DOMAIN" | grep -q "301\|302"; then
        log_success "HTTP to HTTPS redirect working"
    else
        log_warning "HTTP to HTTPS redirect test failed"
    fi
}

# Main function
main() {
    log_info "Starting SSL setup for QT Office Check Printing System..."
    
    # Check prerequisites
    check_root
    check_domain
    check_email
    
    # Setup SSL
    install_certbot
    create_webroot
    obtain_certificate
    create_nginx_config
    enable_nginx_site
    setup_renewal
    test_ssl
    
    log_success "SSL setup completed successfully!"
    log_info "Your QT Office application is now available at: https://$DOMAIN"
    log_info "SSL certificates will be automatically renewed"
    
    echo ""
    log_info "Next steps:"
    echo "1. Update your .env.local file with HTTPS configuration"
    echo "2. Restart your Next.js application"
    echo "3. Test your application at https://$DOMAIN"
    echo ""
    log_info "Environment variables to add to .env.local:"
    echo "FORCE_HTTPS=true"
    echo "HSTS_MAX_AGE=31536000"
    echo "HSTS_INCLUDE_SUBDOMAINS=true"
    echo "HSTS_PRELOAD=true"
}

# Handle command line arguments
if [[ $# -eq 1 ]]; then
    DOMAIN="$1"
fi

# Run main function
main


