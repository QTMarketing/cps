// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ==================== MODELS ====================

model User {
  id            String   @id @default(uuid())
  username      String   @unique
  email         String   @unique
  passwordHash  String   @map("password_hash")
  role          Role     @default(USER)
  storeId       String?  @map("store_id")
  store         Store?   @relation(fields: [storeId], references: [id])
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  checks        Check[]
  auditLogs     AuditLog[]
  
  @@map("users")
}

model Store {
  id        String   @id @default(uuid())
  name      String
  address   String?
  phone     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users     User[]
  banks     Bank[]
  vendors   Vendor[]
  
  @@map("stores")
}

model Bank {
  id              String   @id @default(uuid())
  bankName        String   @map("bank_name")
  accountNumber   String   @map("account_number") // Encrypted
  routingNumber   String   @map("routing_number") // Encrypted
  accountType     AccountType @default(CHECKING) @map("account_type")
  storeId         String   @map("store_id")
  store           Store    @relation(fields: [storeId], references: [id])
  balance         Decimal  @default(0) @db.Decimal(12, 2)
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  checks          Check[]
  
  @@map("banks")
}

model Vendor {
  id            String      @id @default(uuid())
  vendorName    String      @map("vendor_name")
  vendorType    VendorType  @map("vendor_type")
  description   String?
  contactPerson String?     @map("contact_person")
  email         String?
  phone         String?
  address       String?
  storeId       String      @map("store_id")
  store         Store       @relation(fields: [storeId], references: [id])
  isActive      Boolean     @default(true) @map("is_active")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  checks        Check[]
  
  @@map("vendors")
}

model Check {
  id              String        @id @default(uuid())
  checkNumber     String?       @map("check_number")
  referenceNumber String        @unique @map("reference_number")
  paymentMethod   PaymentMethod @map("payment_method")
  bankId          String        @map("bank_id")
  bank            Bank          @relation(fields: [bankId], references: [id])
  vendorId        String        @map("vendor_id")
  vendor          Vendor        @relation(fields: [vendorId], references: [id])
  payeeName       String        @map("payee_name")
  amount          Decimal       @db.Decimal(10, 2)
  memo            String?
  status          CheckStatus   @default(ISSUED)
  invoiceUrl      String?       @map("invoice_url")
  issuedBy        String        @map("issued_by")
  issuedByUser    User          @relation(fields: [issuedBy], references: [id])
  issuedAt        DateTime      @default(now()) @map("issued_at")
  clearedAt       DateTime?     @map("cleared_at")
  voidedAt        DateTime?     @map("voided_at")
  voidReason      String?       @map("void_reason")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  history         CheckHistory[]
  
  @@map("checks")
}

model CheckHistory {
  id            String   @id @default(uuid())
  checkId       String   @map("check_id")
  check         Check    @relation(fields: [checkId], references: [id])
  action        String
  status        CheckStatus?
  performedBy   String   @map("performed_by")
  changes       Json?    // Store before/after values
  reason        String?
  ipAddress     String?  @map("ip_address")
  timestamp     DateTime @default(now())

  @@map("check_history")
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id])
  action      String
  entityType  String   @map("entity_type")
  entityId    String   @map("entity_id")
  oldValues   Json?    @map("old_values")
  newValues   Json?    @map("new_values")
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("audit_logs")
}

// ==================== ENUMS ====================

enum Role {
  ADMIN
  MANAGER
  USER
}

enum VendorType {
  MERCHANDISE
  EXPENSE
  EMPLOYEE
}

enum PaymentMethod {
  CHECK
  EDI
  MO
  CASH
}

enum AccountType {
  CHECKING
  SAVINGS
}

enum CheckStatus {
  DRAFT
  ISSUED
  CLEARED
  VOID
  CANCELLED
}